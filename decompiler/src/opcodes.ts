// auto-generated by genOpcodes.ts

/**
 * Numeric Hermes instruction opcodes.
 */
export enum Opcode { // {{{
  Unreachable,
  NewObjectWithBuffer,
  NewObjectWithBufferLong,
  NewObject,
  NewObjectWithParent,
  NewArrayWithBuffer,
  NewArrayWithBufferLong,
  NewArray,
  Mov,
  MovLong,
  Negate,
  Not,
  BitNot,
  TypeOf,
  Eq,
  StrictEq,
  Neq,
  StrictNeq,
  Less,
  LessEq,
  Greater,
  GreaterEq,
  Add,
  AddN,
  Mul,
  MulN,
  Div,
  DivN,
  Mod,
  Sub,
  SubN,
  LShift,
  RShift,
  URshift,
  BitAnd,
  BitXor,
  BitOr,
  Inc,
  Dec,
  InstanceOf,
  IsIn,
  GetEnvironment,
  StoreToEnvironment,
  StoreToEnvironmentL,
  StoreNPToEnvironment,
  StoreNPToEnvironmentL,
  LoadFromEnvironment,
  LoadFromEnvironmentL,
  GetGlobalObject,
  GetNewTarget,
  CreateEnvironment,
  CreateInnerEnvironment,
  DeclareGlobalVar,
  ThrowIfHasRestrictedGlobalProperty,
  GetByIdShort,
  GetById,
  GetByIdLong,
  TryGetById,
  TryGetByIdLong,
  PutById,
  PutByIdLong,
  TryPutById,
  TryPutByIdLong,
  PutNewOwnByIdShort,
  PutNewOwnById,
  PutNewOwnByIdLong,
  PutNewOwnNEById,
  PutNewOwnNEByIdLong,
  PutOwnByIndex,
  PutOwnByIndexL,
  PutOwnByVal,
  DelById,
  DelByIdLong,
  GetByVal,
  PutByVal,
  DelByVal,
  PutOwnGetterSetterByVal,
  GetPNameList,
  GetNextPName,
  Call,
  Construct,
  Call1,
  CallDirect,
  Call2,
  Call3,
  Call4,
  CallLong,
  ConstructLong,
  CallDirectLongIndex,
  CallBuiltin,
  CallBuiltinLong,
  GetBuiltinClosure,
  Ret,
  Catch,
  DirectEval,
  Throw,
  ThrowIfEmpty,
  Debugger,
  AsyncBreakCheck,
  ProfilePoint,
  CreateClosure,
  CreateClosureLongIndex,
  CreateGeneratorClosure,
  CreateGeneratorClosureLongIndex,
  CreateAsyncClosure,
  CreateAsyncClosureLongIndex,
  CreateThis,
  SelectObject,
  LoadParam,
  LoadParamLong,
  LoadConstUInt8,
  LoadConstInt,
  LoadConstDouble,
  LoadConstBigInt,
  LoadConstBigIntLongIndex,
  LoadConstString,
  LoadConstStringLongIndex,
  LoadConstEmpty,
  LoadConstUndefined,
  LoadConstNull,
  LoadConstTrue,
  LoadConstFalse,
  LoadConstZero,
  CoerceThisNS,
  LoadThisNS,
  ToNumber,
  ToNumeric,
  ToInt32,
  AddEmptyString,
  GetArgumentsPropByVal,
  GetArgumentsLength,
  ReifyArguments,
  CreateRegExp,
  SwitchImm,
  StartGenerator,
  ResumeGenerator,
  CompleteGenerator,
  CreateGenerator,
  CreateGeneratorLongIndex,
  IteratorBegin,
  IteratorNext,
  IteratorClose,
  Jmp,
  JmpLong,
  JmpTrue,
  JmpTrueLong,
  JmpFalse,
  JmpFalseLong,
  JmpUndefined,
  JmpUndefinedLong,
  SaveGenerator,
  SaveGeneratorLong,
  JLess,
  JLessLong,
  JNotLess,
  JNotLessLong,
  JLessN,
  JLessNLong,
  JNotLessN,
  JNotLessNLong,
  JLessEqual,
  JLessEqualLong,
  JNotLessEqual,
  JNotLessEqualLong,
  JLessEqualN,
  JLessEqualNLong,
  JNotLessEqualN,
  JNotLessEqualNLong,
  JGreater,
  JGreaterLong,
  JNotGreater,
  JNotGreaterLong,
  JGreaterN,
  JGreaterNLong,
  JNotGreaterN,
  JNotGreaterNLong,
  JGreaterEqual,
  JGreaterEqualLong,
  JNotGreaterEqual,
  JNotGreaterEqualLong,
  JGreaterEqualN,
  JGreaterEqualNLong,
  JNotGreaterEqualN,
  JNotGreaterEqualNLong,
  JEqual,
  JEqualLong,
  JNotEqual,
  JNotEqualLong,
  JStrictEqual,
  JStrictEqualLong,
  JStrictNotEqual,
  JStrictNotEqualLong,
  Add32,
  Sub32,
  Mul32,
  Divi32,
  Divu32,
  Loadi8,
  Loadu8,
  Loadi16,
  Loadu16,
  Loadi32,
  Loadu32,
  Store8,
  Store16,
  Store32,
} // }}}

/**
 * Argument type corresponding to {@link Opcode}.
 */
export const opcodeTypes = { // {{{
  [Opcode.Unreachable]: [],
  [Opcode.NewObjectWithBuffer]: ["Reg8", "UInt16", "UInt16", "UInt16", "UInt16"],
  [Opcode.NewObjectWithBufferLong]: ["Reg8", "UInt16", "UInt16", "UInt32", "UInt32"],
  [Opcode.NewObject]: ["Reg8"],
  [Opcode.NewObjectWithParent]: ["Reg8", "Reg8"],
  [Opcode.NewArrayWithBuffer]: ["Reg8", "UInt16", "UInt16", "UInt16"],
  [Opcode.NewArrayWithBufferLong]: ["Reg8", "UInt16", "UInt16", "UInt32"],
  [Opcode.NewArray]: ["Reg8", "UInt16"],
  [Opcode.Mov]: ["Reg8", "Reg8"],
  [Opcode.MovLong]: ["Reg32", "Reg32"],
  [Opcode.Negate]: ["Reg8", "Reg8"],
  [Opcode.Not]: ["Reg8", "Reg8"],
  [Opcode.BitNot]: ["Reg8", "Reg8"],
  [Opcode.TypeOf]: ["Reg8", "Reg8"],
  [Opcode.Eq]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.StrictEq]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.Neq]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.StrictNeq]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.Less]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.LessEq]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.Greater]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.GreaterEq]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.Add]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.AddN]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.Mul]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.MulN]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.Div]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.DivN]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.Mod]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.Sub]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.SubN]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.LShift]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.RShift]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.URshift]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.BitAnd]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.BitXor]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.BitOr]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.Inc]: ["Reg8", "Reg8"],
  [Opcode.Dec]: ["Reg8", "Reg8"],
  [Opcode.InstanceOf]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.IsIn]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.GetEnvironment]: ["Reg8", "UInt8"],
  [Opcode.StoreToEnvironment]: ["Reg8", "UInt8", "Reg8"],
  [Opcode.StoreToEnvironmentL]: ["Reg8", "UInt16", "Reg8"],
  [Opcode.StoreNPToEnvironment]: ["Reg8", "UInt8", "Reg8"],
  [Opcode.StoreNPToEnvironmentL]: ["Reg8", "UInt16", "Reg8"],
  [Opcode.LoadFromEnvironment]: ["Reg8", "Reg8", "UInt8"],
  [Opcode.LoadFromEnvironmentL]: ["Reg8", "Reg8", "UInt16"],
  [Opcode.GetGlobalObject]: ["Reg8"],
  [Opcode.GetNewTarget]: ["Reg8"],
  [Opcode.CreateEnvironment]: ["Reg8"],
  [Opcode.CreateInnerEnvironment]: ["Reg8", "Reg8", "UInt32"],
  [Opcode.DeclareGlobalVar]: ["UInt32"],
  [Opcode.ThrowIfHasRestrictedGlobalProperty]: ["UInt32"],
  [Opcode.GetByIdShort]: ["Reg8", "Reg8", "UInt8", "UInt8"],
  [Opcode.GetById]: ["Reg8", "Reg8", "UInt8", "UInt16"],
  [Opcode.GetByIdLong]: ["Reg8", "Reg8", "UInt8", "UInt32"],
  [Opcode.TryGetById]: ["Reg8", "Reg8", "UInt8", "UInt16"],
  [Opcode.TryGetByIdLong]: ["Reg8", "Reg8", "UInt8", "UInt32"],
  [Opcode.PutById]: ["Reg8", "Reg8", "UInt8", "UInt16"],
  [Opcode.PutByIdLong]: ["Reg8", "Reg8", "UInt8", "UInt32"],
  [Opcode.TryPutById]: ["Reg8", "Reg8", "UInt8", "UInt16"],
  [Opcode.TryPutByIdLong]: ["Reg8", "Reg8", "UInt8", "UInt32"],
  [Opcode.PutNewOwnByIdShort]: ["Reg8", "Reg8", "UInt8"],
  [Opcode.PutNewOwnById]: ["Reg8", "Reg8", "UInt16"],
  [Opcode.PutNewOwnByIdLong]: ["Reg8", "Reg8", "UInt32"],
  [Opcode.PutNewOwnNEById]: ["Reg8", "Reg8", "UInt16"],
  [Opcode.PutNewOwnNEByIdLong]: ["Reg8", "Reg8", "UInt32"],
  [Opcode.PutOwnByIndex]: ["Reg8", "Reg8", "UInt8"],
  [Opcode.PutOwnByIndexL]: ["Reg8", "Reg8", "UInt32"],
  [Opcode.PutOwnByVal]: ["Reg8", "Reg8", "Reg8", "UInt8"],
  [Opcode.DelById]: ["Reg8", "Reg8", "UInt16"],
  [Opcode.DelByIdLong]: ["Reg8", "Reg8", "UInt32"],
  [Opcode.GetByVal]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.PutByVal]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.DelByVal]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.PutOwnGetterSetterByVal]: ["Reg8", "Reg8", "Reg8", "Reg8", "UInt8"],
  [Opcode.GetPNameList]: ["Reg8", "Reg8", "Reg8", "Reg8"],
  [Opcode.GetNextPName]: ["Reg8", "Reg8", "Reg8", "Reg8", "Reg8"],
  [Opcode.Call]: ["Reg8", "Reg8", "UInt8"],
  [Opcode.Construct]: ["Reg8", "Reg8", "UInt8"],
  [Opcode.Call1]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.CallDirect]: ["Reg8", "UInt8", "UInt16"],
  [Opcode.Call2]: ["Reg8", "Reg8", "Reg8", "Reg8"],
  [Opcode.Call3]: ["Reg8", "Reg8", "Reg8", "Reg8", "Reg8"],
  [Opcode.Call4]: ["Reg8", "Reg8", "Reg8", "Reg8", "Reg8", "Reg8"],
  [Opcode.CallLong]: ["Reg8", "Reg8", "UInt32"],
  [Opcode.ConstructLong]: ["Reg8", "Reg8", "UInt32"],
  [Opcode.CallDirectLongIndex]: ["Reg8", "UInt8", "UInt32"],
  [Opcode.CallBuiltin]: ["Reg8", "UInt8", "UInt8"],
  [Opcode.CallBuiltinLong]: ["Reg8", "UInt8", "UInt32"],
  [Opcode.GetBuiltinClosure]: ["Reg8", "UInt8"],
  [Opcode.Ret]: ["Reg8"],
  [Opcode.Catch]: ["Reg8"],
  [Opcode.DirectEval]: ["Reg8", "Reg8", "UInt8"],
  [Opcode.Throw]: ["Reg8"],
  [Opcode.ThrowIfEmpty]: ["Reg8", "Reg8"],
  [Opcode.Debugger]: [],
  [Opcode.AsyncBreakCheck]: [],
  [Opcode.ProfilePoint]: ["UInt16"],
  [Opcode.CreateClosure]: ["Reg8", "Reg8", "UInt16"],
  [Opcode.CreateClosureLongIndex]: ["Reg8", "Reg8", "UInt32"],
  [Opcode.CreateGeneratorClosure]: ["Reg8", "Reg8", "UInt16"],
  [Opcode.CreateGeneratorClosureLongIndex]: ["Reg8", "Reg8", "UInt32"],
  [Opcode.CreateAsyncClosure]: ["Reg8", "Reg8", "UInt16"],
  [Opcode.CreateAsyncClosureLongIndex]: ["Reg8", "Reg8", "UInt32"],
  [Opcode.CreateThis]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.SelectObject]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.LoadParam]: ["Reg8", "UInt8"],
  [Opcode.LoadParamLong]: ["Reg8", "UInt32"],
  [Opcode.LoadConstUInt8]: ["Reg8", "UInt8"],
  [Opcode.LoadConstInt]: ["Reg8", "Imm32"],
  [Opcode.LoadConstDouble]: ["Reg8", "Double"],
  [Opcode.LoadConstBigInt]: ["Reg8", "UInt16"],
  [Opcode.LoadConstBigIntLongIndex]: ["Reg8", "UInt32"],
  [Opcode.LoadConstString]: ["Reg8", "UInt16"],
  [Opcode.LoadConstStringLongIndex]: ["Reg8", "UInt32"],
  [Opcode.LoadConstEmpty]: ["Reg8"],
  [Opcode.LoadConstUndefined]: ["Reg8"],
  [Opcode.LoadConstNull]: ["Reg8"],
  [Opcode.LoadConstTrue]: ["Reg8"],
  [Opcode.LoadConstFalse]: ["Reg8"],
  [Opcode.LoadConstZero]: ["Reg8"],
  [Opcode.CoerceThisNS]: ["Reg8", "Reg8"],
  [Opcode.LoadThisNS]: ["Reg8"],
  [Opcode.ToNumber]: ["Reg8", "Reg8"],
  [Opcode.ToNumeric]: ["Reg8", "Reg8"],
  [Opcode.ToInt32]: ["Reg8", "Reg8"],
  [Opcode.AddEmptyString]: ["Reg8", "Reg8"],
  [Opcode.GetArgumentsPropByVal]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.GetArgumentsLength]: ["Reg8", "Reg8"],
  [Opcode.ReifyArguments]: ["Reg8"],
  [Opcode.CreateRegExp]: ["Reg8", "UInt32", "UInt32", "UInt32"],
  [Opcode.SwitchImm]: ["Reg8", "UInt32", "Addr32", "UInt32", "UInt32"],
  [Opcode.StartGenerator]: [],
  [Opcode.ResumeGenerator]: ["Reg8", "Reg8"],
  [Opcode.CompleteGenerator]: [],
  [Opcode.CreateGenerator]: ["Reg8", "Reg8", "UInt16"],
  [Opcode.CreateGeneratorLongIndex]: ["Reg8", "Reg8", "UInt32"],
  [Opcode.IteratorBegin]: ["Reg8", "Reg8"],
  [Opcode.IteratorNext]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.IteratorClose]: ["Reg8", "UInt8"],
  [Opcode.Jmp]: ["Addr8"],
  [Opcode.JmpLong]: ["Addr32"],
  [Opcode.JmpTrue]: ["Addr8", "Reg8"],
  [Opcode.JmpTrueLong]: ["Addr32", "Reg8"],
  [Opcode.JmpFalse]: ["Addr8", "Reg8"],
  [Opcode.JmpFalseLong]: ["Addr32", "Reg8"],
  [Opcode.JmpUndefined]: ["Addr8", "Reg8"],
  [Opcode.JmpUndefinedLong]: ["Addr32", "Reg8"],
  [Opcode.SaveGenerator]: ["Addr8"],
  [Opcode.SaveGeneratorLong]: ["Addr32"],
  [Opcode.JLess]: ["Addr8", "Reg8", "Reg8"],
  [Opcode.JLessLong]: ["Addr32", "Reg8", "Reg8"],
  [Opcode.JNotLess]: ["Addr8", "Reg8", "Reg8"],
  [Opcode.JNotLessLong]: ["Addr32", "Reg8", "Reg8"],
  [Opcode.JLessN]: ["Addr8", "Reg8", "Reg8"],
  [Opcode.JLessNLong]: ["Addr32", "Reg8", "Reg8"],
  [Opcode.JNotLessN]: ["Addr8", "Reg8", "Reg8"],
  [Opcode.JNotLessNLong]: ["Addr32", "Reg8", "Reg8"],
  [Opcode.JLessEqual]: ["Addr8", "Reg8", "Reg8"],
  [Opcode.JLessEqualLong]: ["Addr32", "Reg8", "Reg8"],
  [Opcode.JNotLessEqual]: ["Addr8", "Reg8", "Reg8"],
  [Opcode.JNotLessEqualLong]: ["Addr32", "Reg8", "Reg8"],
  [Opcode.JLessEqualN]: ["Addr8", "Reg8", "Reg8"],
  [Opcode.JLessEqualNLong]: ["Addr32", "Reg8", "Reg8"],
  [Opcode.JNotLessEqualN]: ["Addr8", "Reg8", "Reg8"],
  [Opcode.JNotLessEqualNLong]: ["Addr32", "Reg8", "Reg8"],
  [Opcode.JGreater]: ["Addr8", "Reg8", "Reg8"],
  [Opcode.JGreaterLong]: ["Addr32", "Reg8", "Reg8"],
  [Opcode.JNotGreater]: ["Addr8", "Reg8", "Reg8"],
  [Opcode.JNotGreaterLong]: ["Addr32", "Reg8", "Reg8"],
  [Opcode.JGreaterN]: ["Addr8", "Reg8", "Reg8"],
  [Opcode.JGreaterNLong]: ["Addr32", "Reg8", "Reg8"],
  [Opcode.JNotGreaterN]: ["Addr8", "Reg8", "Reg8"],
  [Opcode.JNotGreaterNLong]: ["Addr32", "Reg8", "Reg8"],
  [Opcode.JGreaterEqual]: ["Addr8", "Reg8", "Reg8"],
  [Opcode.JGreaterEqualLong]: ["Addr32", "Reg8", "Reg8"],
  [Opcode.JNotGreaterEqual]: ["Addr8", "Reg8", "Reg8"],
  [Opcode.JNotGreaterEqualLong]: ["Addr32", "Reg8", "Reg8"],
  [Opcode.JGreaterEqualN]: ["Addr8", "Reg8", "Reg8"],
  [Opcode.JGreaterEqualNLong]: ["Addr32", "Reg8", "Reg8"],
  [Opcode.JNotGreaterEqualN]: ["Addr8", "Reg8", "Reg8"],
  [Opcode.JNotGreaterEqualNLong]: ["Addr32", "Reg8", "Reg8"],
  [Opcode.JEqual]: ["Addr8", "Reg8", "Reg8"],
  [Opcode.JEqualLong]: ["Addr32", "Reg8", "Reg8"],
  [Opcode.JNotEqual]: ["Addr8", "Reg8", "Reg8"],
  [Opcode.JNotEqualLong]: ["Addr32", "Reg8", "Reg8"],
  [Opcode.JStrictEqual]: ["Addr8", "Reg8", "Reg8"],
  [Opcode.JStrictEqualLong]: ["Addr32", "Reg8", "Reg8"],
  [Opcode.JStrictNotEqual]: ["Addr8", "Reg8", "Reg8"],
  [Opcode.JStrictNotEqualLong]: ["Addr32", "Reg8", "Reg8"],
  [Opcode.Add32]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.Sub32]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.Mul32]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.Divi32]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.Divu32]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.Loadi8]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.Loadu8]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.Loadi16]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.Loadu16]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.Loadi32]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.Loadu32]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.Store8]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.Store16]: ["Reg8", "Reg8", "Reg8"],
  [Opcode.Store32]: ["Reg8", "Reg8", "Reg8"],
} as const; // }}}

/**
 * Opcodes which have operands referring to the bigint table.
 */
export const bigIntOperands = { // {{{
  [Opcode.LoadConstBigInt]: [2],
  [Opcode.LoadConstBigIntLongIndex]: [2],
} as Record<Opcode, number[]>; // }}}

/**
 * Opcodes which have operands referring to the function table.
 */
export const functionOperands = { // {{{
  [Opcode.CallDirect]: [3],
  [Opcode.CreateClosure]: [3],
  [Opcode.CreateClosureLongIndex]: [3],
  [Opcode.CreateGeneratorClosure]: [3],
  [Opcode.CreateGeneratorClosureLongIndex]: [3],
  [Opcode.CreateAsyncClosure]: [3],
  [Opcode.CreateAsyncClosureLongIndex]: [3],
  [Opcode.CreateGenerator]: [3],
  [Opcode.CreateGeneratorLongIndex]: [3],
} as Record<Opcode, number[]>; // }}}

/**
 * Opcodes which have operands referring to the string table.
 */
export const stringOperands = { // {{{
  [Opcode.DeclareGlobalVar]: [1],
  [Opcode.ThrowIfHasRestrictedGlobalProperty]: [1],
  [Opcode.GetByIdShort]: [4],
  [Opcode.GetById]: [4],
  [Opcode.GetByIdLong]: [4],
  [Opcode.TryGetById]: [4],
  [Opcode.TryGetByIdLong]: [4],
  [Opcode.PutById]: [4],
  [Opcode.PutByIdLong]: [4],
  [Opcode.TryPutById]: [4],
  [Opcode.TryPutByIdLong]: [4],
  [Opcode.PutNewOwnByIdShort]: [3],
  [Opcode.PutNewOwnById]: [3],
  [Opcode.PutNewOwnByIdLong]: [3],
  [Opcode.PutNewOwnNEById]: [3],
  [Opcode.PutNewOwnNEByIdLong]: [3],
  [Opcode.DelById]: [3],
  [Opcode.DelByIdLong]: [3],
  [Opcode.LoadConstString]: [2],
  [Opcode.LoadConstStringLongIndex]: [2],
  [Opcode.CreateRegExp]: [2, 3],
} as Record<Opcode, number[]>; // }}}

export type ArgumentType = typeof opcodeTypes[Opcode][number];

// vim: set foldenable:
